import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerRemoveImage
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerWaitContainer


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath(
            'org.springframework.boot:spring-boot-gradle-plugin:1.5.8.RELEASE',
            'com.bmuschko:gradle-docker-plugin:3.0.11'
        )
    }
}

allprojects {
    version '0.0.1'
}

// TODO: add optional plugins 'findbugs', 'project-report', 'net.ltgt.errorprone'
apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    project {
        jdkName = '1.8'
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    compile("org.springframework.boot:spring-boot-starter-jetty")
    compile("org.springframework.boot:spring-boot-starter-actuator")

    testCompile('org.testng:testng:6.11')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework:spring-test')
    testCompile('org.springframework.boot:spring-boot-test')
}

// override output directory
//project.setBuildDir("./target")

String getCurrentDir() {
    System.getProperty("user.dir")
}

tasks.withType(JavaCompile) {
    options.fork = true
    options.incremental = true
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from 'build/docs/javadoc'
    classifier = 'sources'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}


/**
 * Docker related tasks
 */

// compile related docker tasks
// TODO: eliminate redundancy of docker related tasks
project.ext.build = [
    dockerfile: "Dockerfile.build",
    imageName: "grimmjow8/dealership-demo-build",
    containerName: "springboot-car-demo-build"
]

task buildRemoveContainer(type: DockerRemoveContainer, group: "build") {
    force = true
    targetContainerId { project.build.containerName }
    onError {
        println "Failed removing build container"
    }
}

task buildRemoveImage(type: DockerRemoveImage, group: "build") {
    dependsOn buildRemoveContainer
    force = true
    targetImageId { project.build.imageName }
    onError {
        println "Failed removing build image"
    }
}

task buildCreateImage(type: DockerBuildImage, group: "build") {
    inputDir = file('.')
    dockerFile = file(project.build.dockerfile)
    tags = [project.build.imageName]
}

task buildCreateContainer(type: DockerCreateContainer, group: "build") {
    dependsOn buildCreateImage
    targetImageId { project.build.imageName }
    containerName project.build.containerName
    binds = ["${currentDir}":"/app/api"]
    cmd = ["clean", "build"]
}

task buildStartContainer(type: DockerStartContainer, group: "build") {
    dependsOn buildCreateContainer
    targetContainerId { project.build.containerName }
}

task buildWaitContainer(type: DockerWaitContainer, group: "build") {
    dependsOn buildStartContainer
    targetContainerId { project.build.containerName }
}

task buildClean(group: "build") {
    dependsOn buildRemoveImage
}

task buildApp(group: "build") {
    dependsOn buildClean, buildWaitContainer
}

// execution related docker tasks
project.ext.run = [
    dockerfile: "Dockerfile.run",
    imageName: "grimmjow8/dealership-demo-run",
    containerName: "springboot-car-demo-run"
]

task runRemoveContainer(type: DockerRemoveContainer, group: "run") {
    force = true
    targetContainerId { project.run.containerName }
    onError {
        println "Failed removing run container"
    }
}

task runRemoveImage(type: DockerRemoveImage, group: "run") {
    dependsOn runRemoveContainer
    force = true
    targetImageId { project.run.imageName }
    onError {
        println "Failed removing run image"
    }
}

task runCreateImage(type: DockerBuildImage, group: "run") {
    inputDir = file('.')
    dockerFile = file(project.run.dockerfile)
    tags = [project.run.imageName]
}

task runCreateContainer(type: DockerCreateContainer, group: "run") {
    dependsOn runCreateImage
    targetImageId { project.run.imageName }
    containerName project.run.containerName
    binds = ["${currentDir}":"/app/api"]
    cmd = ["bootRun", "--stacktrace"]
    portBindings = ["8080:8080"]
}

task runStartContainer(type: DockerStartContainer, group: "run") {
    dependsOn runCreateContainer
    targetContainerId { project.run.containerName }
}

task runWaitContainer(type: DockerWaitContainer, group: "run") {
    dependsOn runStartContainer
    targetContainerId { project.run.containerName }
}

task runClean(group: "run") {
    dependsOn runRemoveImage
}

task runApp(group: "run") {
    dependsOn runClean, runWaitContainer
}


//test {
//    useTestNG()
//}